{
	"info": {
		"_postman_id": "00e58bc3-a4d6-4c62-a484-a3f70dc823a3",
		"name": "Digital Excellence API",
		"description": "Testing Digital Excellence API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "User-CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userName = pm.environment.get(\"userName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Check created UserName\", function () {",
									"    pm.environment.set(\"userId\", jsonData.id);",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"{{userId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-GetUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userId = parseInt(pm.environment.get(\"userId\"));",
									"var userName = pm.environment.get(\"userName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check previously created UserId with id \" + userId, function () {",
									"    pm.expect(jsonData.id).to.eql(userId);",
									"});",
									"",
									"pm.test(\"Check previously created UserName with id \" + userId, function () {",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userName = pm.environment.get(\"userNameUpdated\");",
									"pm.environment.set(\"userName\", userName);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check updated postmantest UserName\", function () {",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"postmantest_email\",\r\n  \"identityId\": \"postmantest_identityId\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-GetUpdatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userId = parseInt(pm.environment.get(\"userId\"));",
									"var userName = pm.environment.get(\"userName\")",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+ responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Updated UserId\", function () {",
									"    pm.expect(jsonData.id).to.eql(userId);",
									"});",
									"",
									"pm.test(\"Updated UserName\", function(){",
									"   pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project",
			"item": [
				{
					"name": "Project-CreateProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userId = parseInt(pm.environment.get(\"userId\"));",
									"var userName = pm.environment.get(\"userName\");",
									"var projectName = pm.environment.get(\"projectName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"ProjectName is set correctly\", function(){",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"UserId is set correctly\", function(){",
									"    pm.expect(jsonData.userId).to.eql(userId);",
									"});",
									"",
									"pm.test(\"User.Name is correct\", function () {",
									"    pm.expect(jsonData.user.name).to.eql(userName);",
									"});",
									"",
									"pm.test(\"User.ID is correct\", function(){",
									"    pm.expect(jsonData.user.id).to.eql(userId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-GetAllProjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userId = parseInt(pm.environment.get(\"userId\"));",
									"var projectName = pm.environment.get(\"projectName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var foundAt;",
									"",
									"function findProject(jsonData, name){",
									"    for(var i = 0; i < jsonData.length; i++){",
									"        if(jsonData[i].name == name){",
									"            return i;",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project is in list\", function(){",
									"    foundAt = findProject(jsonData, projectName);",
									"    pm.expect(foundAt).to.not.eql(-1);",
									"});",
									"",
									"pm.test(\"ProjectName is set correctly\", function () {",
									"    pm.expect(jsonData[foundAt].name).to.eql(projectName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-GetProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var projectId = parseInt(pm.environment.get(\"projectId\"));",
									"var projectName = pm.environment.get(\"projectName\");",
									"var userId = parseInt(pm.environment.get(\"userId\"));",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"ProjectName is set correctly\", function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"UserId is set correctly\", function(){",
									"    pm.expect(jsonData.userId).to.eql(userId);",
									"});",
									"",
									"pm.test(\"User.Name is correct\", function () {",
									"    pm.expect(jsonData.user.name).to.eql(userName);",
									"});",
									"",
									"pm.test(\"User.ID is correct\", function(){",
									"    pm.expect(jsonData.user.id).to.eql(userId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-UpdateProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var projectName = pm.environment.get(\"projectNameUpdated\");",
									"pm.environment.set(\"projectName\", projectName);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"ProjectName is set correctly\", function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-GetUpdatedProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"var userId = parseInt(pm.environment.get(\"userId\"));",
									"var userName = pm.environment.get(\"userName\");",
									"var projectId = parseInt(pm.environment.get(\"projectId\"));",
									"var projectName = pm.environment.get(\"projectName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"ProjectName is set correctly\", function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"UserId is set correctly\", function(){",
									"    pm.expect(jsonData.userId).to.eql(userId);",
									"});",
									"",
									"pm.test(\"User.Name is correct\", function () {",
									"    pm.expect(jsonData.user.name).to.eql(userName);",
									"});",
									"",
									"pm.test(\"User.ID is correct\", function(){",
									"    pm.expect(jsonData.user.id).to.eql(userId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search-SearchInternal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Search/internal/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Search",
								"internal",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Project-DeleteProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e92e98-3709-4178-8e4f-b27f88fc82d1",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "43e0d64e-b209-4284-a582-13246f4b4408",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1",
					"",
					"let tokenUrl = pm.variables.get(\"tokenUrl\");",
					"let clientId = pm.variables.get(\"clientId\");",
					"let clientSecret = pm.variables.get(\"clientSecret\");",
					"let scope = pm.variables.get(\"scope\");",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"            { key: \"username\", value: clientId },",
					"            { key: \"password\", value: clientSecret }",
					"        ]",
					"    },",
					"    body: {",
					"        mode: 'formdata',",
					"        formdata: [",
					"            { key: 'grant_type', value: 'client_credentials' },",
					"            { key: 'scope', value: scope }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "eee2d2ef-5e51-4d88-b237-722b347c7188",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
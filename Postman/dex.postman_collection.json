{
	"info": {
		"_postman_id": "42128aa1-c53f-4bf3-b9b7-7b440dc1bba8",
		"name": "DEV",
		"description": "Testing Digital Excellence API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warmup",
			"item": [
				{
					"name": "CreateUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Create-RegisteredUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"registeredUserId\", jsonData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImU4VW1OX2NmZlBoamVPQ3hCSkZpb2ciLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE2MDgyMDE4MTMsImV4cCI6MTYwODIwNTQxMywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwNSIsImF1ZCI6ImRleC1hcGkiLCJjbGllbnRfaWQiOiJkZXgtYXBpLWNsaWVudCIsImNsaWVudF9yb2xlIjoiQmFja2VuZEFwcGxpY2F0aW9uIiwic2NvcGUiOlsiRW1iZWRSZWFkIiwiRW1iZWRXcml0ZSIsIkhpZ2hsaWdodFJlYWQiLCJIaWdobGlnaHRXcml0ZSIsIlByb2plY3RSZWFkIiwiUHJvamVjdFdyaXRlIiwiVXNlclJlYWQiLCJVc2VyV3JpdGUiXX0.jT1Edm1dzKAu47xBFWg4IEWXoIYKTS5lScCmE798FfNdzRutVXlPmMZtac_PcmEcHrbgMvKUqd97UhpnT1ywhToXTQOVcy2EeWfprOkSWKxvTYiP1O55a01iWnOvLcs20ucbjPBHxYeq1WL3FoEfs0ahVSB4nDrqX_MYYmkvX2XriUb97fm9Sdk5fCh44q2tVH7ywZYOWmd3ZwqDB_X4GwyGGpOL_WTIQe-NaBeeONXuKcfEbF5_GpUz751nBvtnuB2lBuAeijLakb4SmtUiaxE479yjMoMz5LA6rpiGxz44gq0k-2r9EZNZs92ziop0cKuvExrDXcScJNAI4QuToQ",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{registeredUserIdentityId}}\",\r\n    \"name\": \"Registered Postman User\",\r\n    \"email\": \"registeredUser@postman.com\",\r\n    \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Create-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"prUserId\", jsonData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{prUserIdentityId}}\",\r\n    \"name\": \"Public Relationship Postman User\",\r\n    \"email\": \"PRUser@postman.com\",\r\n    \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-PRUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{prUserId}}&roleId={{prRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{prUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{prRole}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Create-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n    \"name\": \"Data Officer Postman User\",\r\n    \"email\": \"dataOfficerUser@postman.com\",\r\n    \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-DataOfficerUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{dataOfficerUserId}}&roleId={{dataOfficerRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dataOfficerUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{dataOfficerRole}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Project-GetAllProjects-Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-CreateProjectToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var projectName = pm.environment.get(\"projectName\");",
									"var adminUserName = pm.environment.get(\"adminUserName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectIdToFollow\", jsonData.id);",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
									"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToFollow\",\r\n  \"shortDescription\": \"postmantest_ProjectToFollow\",\r\n  \"uri\": \"postmantest_ProjectToFollow\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToFollow\",\r\n      \"role\": \"postmantest_ProjectToFollow\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUserToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userName = pm.environment.get(\"userName\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"userIdToFollow\", jsonData.id)",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check if created Username matches: \" + userName, function () {",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_UserToFollow@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProjectToBeDeletedByUnauthorizedRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"projectToBeDeletedByUnauthorizedRoles\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"shortDescription\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"uri\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n      \"role\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-CreateProjectToMakePrivate-PRUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var projectName = pm.environment.get(\"projectName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectToMakePrivateId\", jsonData.id);",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{registeredUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToMakePrivate\",\r\n  \"shortDescription\": \"postmantest_ProjectMakePrivate\",\r\n  \"uri\": \"postmantest_ProjectToFollow\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectMakePrivate\",\r\n      \"role\": \"postmantest_ProjectMakePrivate\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category-CreateCategoryToBeCategorized-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"eval(pm.environment.get(\"commonTests\"))();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a json body\", function () {\r",
									"    pm.response.to.be.success;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"categoryIdToBeCategorized\", jsonData.id);\r",
									"\r",
									"var categoryNameInitial = pm.environment.get(\"categoryNameInitial\");\r",
									"pm.environment.set(\"categoryName\", categoryNameInitial);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{categoryNameInitial}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Category",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-CreateProjectToCategorize-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var projectName = pm.environment.get(\"projectName\");",
									"var adminUserName = pm.environment.get(\"adminUserName\");",
									"var categoryName = pm.environment.get(\"categoryNameInitial\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectIdToCategorize\", jsonData.id);",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
									"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
									"});",
									"",
									"pm.test(\"Category is set correctly and matching: \" + categoryName, function () {",
									"    pm.expect(jsonData.categories[0].name).to.eql(categoryName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToTag\",\r\n  \"shortDescription\": \"postmantest_ProjectToTag\",\r\n  \"uri\": \"postmantest_ProjectToTag\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToTag\",\r\n      \"role\": \"postmantest_ProjectToTag\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\",\r\n  \"categories\": [\r\n    {\r\n      \"categoryId\": {{categoryIdToBeCategorized}}\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-RemoveProjectCategories-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"category",
								"{{projectIdToCategorize}}",
								"{{categoryIdToBeCategorized}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Warmup the API to ensure fast response times"
		},
		{
			"name": "ACL",
			"item": [
				{
					"name": "Administrator",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"User-CreateUser-Administrator@example.com\",\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userNameUpdated\");",
													"pm.environment.set(\"userName\", userName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"User-CreateUser-Administrator\",\r\n  \"identityId\": \"{{createdUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUpdatedUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserIdentityId = parseInt(pm.environment.get(\"administratorUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"administratorUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(administratorUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var userIdToFollow = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userIdToFollow, function () {",
													"    pm.expect(jsonData.id).to.eql(userIdToFollow);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "Category-CreateCategory-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.success;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.environment.set(\"categoryId\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetAllCategories-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findCategory(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category: \" + categoryName + \" is in list\", function () {",
													"    foundAt = findCategory(jsonData, categoryName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Category Name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryId = parseInt(pm.environment.get(\"categoryId\"));",
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"CategoryName is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-UpdateCategory-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryNameUpdated\");",
													"pm.environment.set(\"categoryName\", categoryName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category Name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryNameUpdated}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetUpdatedCategory-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"CategoryName is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"98989"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_Institution-CreateInstitution-Administrator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var institutionName = pm.environment.get(\"updatedInstitutionName\");",
													"pm.environment.set(\"institutionName\", institutionName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedInstitutionName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetUpdatedInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check if updated institution matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-Administrator\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-Administrator\",\r\n  \"uri\": \"postmantest_Project-CreateProject-Administrator\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-Administrator\",\r\n      \"role\": \"postmantest_Project-CreateProject-Administrator\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"pm.environment.set(\"projectName\", projectName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-UpdateProject-Administrator\",\r\n  \"shortDescription\": \"postmantest_Project-UpdateProject-Administrator\",\r\n  \"uri\": \"postmantest_Project-UpdateProject-Administrator\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-UpdateProject-Administrator\",\r\n      \"role\": \"postmantest_Project-UpdateProject-Administrator\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetUpdatedProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"98989"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404 and have the right error\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"       pm.expect(jsonData.detail).to.eql('The creator of the project send in the request is not bound to an institution and can therefore not make the project private.');\r",
													"    //This test must fail on this status, because its not really possible to add an institution to the administrator with how the tests are setup. Therefore the authentication works (which this test tests), but fails because the administrator doesn't have an institution which is fine because that isn't in the scope of this test.\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.notFound;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Other-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var temporaryProjectId = pm.environment.get('temporaryProjectId');\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectToMakePrivateId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectToMakePrivateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LinkInstitutionToProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The right institution and project were linked\", function(){\r",
													"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"projectId\"));\r",
													"    pm.expect(jsonData.institutionId).to.eql(1);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnlinkInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CategorizeProject",
							"item": [
								{
									"name": "Project-CategorizeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_Highlight-CreateHighlight-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var adminProjectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findHighlight(jsonData, idToFind){",
													"    for(var i = 0; i< jsonData.length; i++)",
													"    {",
													"        if(jsonData[i].projectId == idToFind) ",
													"        { ",
													"            return i; ",
													"        }",
													"    }",
													"    return -1;",
													"    ",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + adminProjectId, function () {",
													"    foundAt = findHighlight(jsonData, adminProjectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightStartDate = pm.environment.get(\"highlightStartDate\");",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_Highlight-UpdateHighlight-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetUpdatedHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightUpdateTimestamp = pm.environment.get(\"current_timestamp\");",
													"var highlightEndDate = pm.environment.get(\"highlightEndDate\");",
													"var highlightId = pm.environment.get(\"highlightId\");",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"98989"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embedGuid = pm.environment.get(\"embedGuid\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].guid == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed is in list and matches: \" + embedGuid, function () {",
													"    foundAt = findItem(jsonData, embedGuid);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/cdaadc49-b4b9-4c11-8937-e602174cba30",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"cdaadc49-b4b9-4c11-8937-e602174cba30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-NoGUID-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"98989"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										},
										"description": "Is deleted in the latest cleanup folder"
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role: \" + roleName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, roleName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly with matching: \" + roleName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetUpdatedRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matches: \" + updatedRoleName, function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role is set correctly and matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if user has role that matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"98989"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[0].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wizard",
							"item": []
						},
						{
							"name": "File",
							"item": [
								{
									"name": "File-CreateFile-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"adminFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Files-GetAll-Adminstrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{adminFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{adminFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-CreateFile-MaxFileSize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"adminFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage4MB.jpg"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-CreateFile-AllowedExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"adminFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testfile.txt"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"postman_CallToActionOption-CreateCallToActionOption-Administrator\",\r\n  \"value\": \"postman_CallToActionOption-CreateCallToActionOption-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Collaborate\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedCallToActionType = pm.environment.get(\"updatedCallToActionType\");",
													"var updatedCallToActionValue = pm.environment.get(\"updatedCallToActionValue\");",
													"pm.environment.set(\"callToActionOptionType\", updatedCallToActionType);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Call to action Type matches: \" + updatedCallToActionType, function () {",
													"    pm.expect(jsonData.type).to.eql(updatedCallToActionType);",
													"});",
													"",
													"pm.test(\"Check if updated Call to action Value matches: \" + updatedCallToActionValue, function () {",
													"    pm.expect(jsonData.value).to.eql(updatedCallToActionValue);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"{{updatedCallToActionType}}\",\r\n    \"value\": \"{{updatedCallToActionValue}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WizardPage",
							"item": [
								{
									"name": "WizardPage-CreateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"wizardPageId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetAllWizardPages-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var pageId = parseInt(pm.environment.get(\"wizardPageId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Wizard page with id: \" + pageId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, pageId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var wizardPageId = pm.environment.get(\"wizardPageId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created wizard page with id \" + wizardPageId, function () {",
													"    pm.expect(jsonData.id).to.eql(wizardPageId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var wizardPageName = pm.environment.get(\"updatedWizardPageName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Wizard Page Name matches: \" + wizardPageName, function () {",
													"    pm.expect(jsonData.name).to.eql(wizardPageName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedWizardPageName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetUpdatedWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var wizardPageId = parseInt(pm.environment.get(\"wizardPageId\"));",
													"var updatedWizardPageName = pm.environment.get(\"updatedWizardPageName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Wizard Page Id matches: \" + wizardPageId, function () {",
													"    pm.expect(jsonData.id).to.eql(wizardPageId);",
													"});",
													"",
													"pm.test(\"Check if updated Wizard Page Name matches: \" + updatedWizardPageName, function () {",
													"    pm.expect(jsonData.name).to.eql(updatedWizardPageName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataSource",
							"item": [
								{
									"name": "DataSource-GetAllDataSources-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Retrieved data sources are not empty\", function () {",
													"    pm.expect(jsonData[0]).not.equal(null);",
													"    pm.environment.set(\"dataSourceId\", jsonData[0].guid);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var dataSourceId = pm.environment.get(\"dataSourceId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created data source with id \" + dataSourceId, function () {",
													"    pm.expect(jsonData.guid).to.eql(dataSourceId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var wizardPageName = pm.environment.get(\"updatedDataSourceName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Wizard Page Name matches: \" + wizardPageName, function () {",
													"    pm.expect(jsonData.title).to.eql(wizardPageName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Title\": \"{{updatedDataSourceName}}\",\r\n  \"description\": \"postmantest_DataSource-UpdateDataSource-Administrator\",\r\n  \"IsVisible\": true,\r\n  \"IconId\": 0,\r\n  \"WizardPageResources\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetUpdatedWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var dataSourceId = pm.environment.get(\"dataSourceId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"",
													"pm.test(\"Check if Data Source Id matches: \" + dataSourceId, function () {",
													"    pm.expect(jsonData.guid).to.eql(dataSourceId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-DeleteCategory-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-WithUsers-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-DeleteInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-DeleteWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Checkup-on-Cleanup",
							"item": [
								{
									"name": "Category-Get-Deleted-Category-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-Get-Deleted-Project-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-Get-Deleted-User-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-Get-Deleted-Embed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-Get-Deleted-Highlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-Get-Deleted-Institution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Guest",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Guest_Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_Guest_Project-CreateProject\",\r\n  \"uri\": \"postmantest_Guest_Project-CreateProject-CreateProjecttest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Guest_Project-CreateProject\",\r\n      \"role\": \"postmantest_Guest_Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-CreateCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"categoryId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Category Name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"postman_User-CreateUser-Guest\",\n    \"email\": \"postman_User-CreateUser-Guest@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "Category-CreateCategory-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetAllCategories-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-UpdateCategory-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryNameUpdated}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-DeleteCategory-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LinkInstitutionToProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnlinkInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.unauthorized\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CategorizeProject",
							"item": [
								{
									"name": "Project-CategorizeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId=1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "1",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Wizard",
							"item": [],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{institutionName}}\",\r\n    \"description\": \"postmantest_initial_description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataSource",
							"item": [
								{
									"name": "DataSource-GetAllDataSources-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Retrieved data sources are not empty\", function () {",
													"    pm.expect(jsonData[0]).not.equal(null);",
													"    pm.environment.set(\"dataSourceId\", jsonData[0].guid);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Title\": \"{{updatedDataSourceName}}\",\r\n  \"description\": \"postmantest_DataSource-UpdateDataSource-Administrator\",\r\n  \"IsVisible\": true,\r\n  \"IconId\": 0,\r\n  \"WizardPageResources\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetUpdatedWizardPage-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WizardPage",
							"item": [
								{
									"name": "WizardPage-CreateWizardPage-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetAllWizardPages-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedWizardPageName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetUpdatedWizardPage-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Registered",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_Registered_User-CreateUser@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"uri\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Registered-Project-CreateProject\",\r\n      \"role\": \"postmantest_Registered-Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Registered_Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-CreateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"wizardPageId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var aliceIdentityId = parseInt(pm.environment.get(\"registeredUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"registeredUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_User-UpdateUser-Self-Registered_alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{registeredUserIdentityId}}\",\r\n  \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "Category-CreateCategory-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetAllCategories-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findCategory(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category met: \" + categoryName + \" is in list\", function () {",
													"    foundAt = findCategory(jsonData, categoryName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryNameInitial\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matches: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-UpdateCategory-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryNameUpdated}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-DeleteCategory-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-Registered\",\r\n      \"role\": \"postmantest_Project-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\",\r\n  \"institutePrivate\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-Registered\",\r\n      \"role\": \"postmantest_Project-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\",\r\n  \"institutePrivate\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectToBeDeletedByUnauthorizedRoles}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectToBeDeletedByUnauthorizedRoles}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.forbidden;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"instituteprivate is set correctly\", function(){\r",
													"    pm.expect(jsonData.institutePrivate).to.eql(true);\r",
													"})\r",
													"\r",
													"pm.test(\"institute is added\", function(){\r",
													"    pm.expect(jsonData.linkedInstitutions).not.empty.null;\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LinkInstitutionToProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.forbidden;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnlinkInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.forbidden\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UserProjects",
							"item": [
								{
									"name": "UserProject-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"userProjectProjectId1\", jsonData.id)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"description\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_UserProject-CreateProject-Registered\",\r\n      \"role\": \"postmantest_UserProject-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserProject-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"userProjectProjectId2\", jsonData.id)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"description\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_UserProject-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_UserProject-CreateProject-Registered\",\r\n      \"role\": \"postmantest_UserProject-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserProject-GetProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project count matches: 4\", function () {",
													"    pm.expect(jsonData.length).to.eql(4);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/user/projects",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"user",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserProject-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{userProjectProjectId1}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{userProjectProjectId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserProject-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{userProjectProjectId2}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{userProjectProjectId2}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CategorizeProject",
							"item": [
								{
									"name": "Project-CategorizeProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CategorizeProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wizard",
							"item": []
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ProjectIcon",
							"item": [
								{
									"name": "ProjectIcon-Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"ProjectIconRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"ProjectIconProjectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n      \"role\": \"postmantest_ProjectIcon-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var ProjectIconRegisteredFileId = pm.environment.get(\"ProjectIconRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + ProjectIconRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(ProjectIconRegisteredFileId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Same-ProjectIcon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n      \"role\": \"postmantest_ProjectIcon-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered-After-Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-Post-New-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"newRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage2.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n      \"role\": \"postmantest_ProjectIcon-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"fileId\": {{newRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetUpdatedProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var newRegisteredFileId = pm.environment.get(\"newRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + newRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(newRegisteredFileId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetDeletedIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{newRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{newRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-DeleteProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Testing if the icons are accessible, and get deleted when they are supposed to ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Get-Files-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"registeredFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{registeredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{registeredFileId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataSource",
							"item": [
								{
									"name": "DataSource-GetAllDataSources-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var dataSourceId = pm.environment.get(\"dataSourceId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created data source with id \" + dataSourceId, function () {",
													"    pm.expect(jsonData.guid).to.eql(dataSourceId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Title\": \"{{updatedDataSourceName}}\",\r\n  \"description\": \"postmantest_DataSource-UpdateDataSource-Administrator\",\r\n  \"IsVisible\": true,\r\n  \"IconId\": 0,\r\n  \"WizardPageResources\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WizardPage",
							"item": [
								{
									"name": "WizardPage-CreateWizardPage-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetAllWizardPages-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var pageId = parseInt(pm.environment.get(\"wizardPageId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Wizard page with id: \" + pageId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, pageId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var wizardPageId = pm.environment.get(\"wizardPageId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created wizard page with id \" + wizardPageId, function () {",
													"    pm.expect(jsonData.id).to.eql(wizardPageId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedWizardPageName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup Registered",
							"item": [
								{
									"name": "Project-DeleteProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-DeleteWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Data Officer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Institution-CreateInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_DataOfficer-Institution-CreateInstitution\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithoutInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"99966\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_DataOfficer-User-CreateUserWithoutInstitution@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserWithInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_DataOfficer-User-CreateUserWithInstitution@example.com\",\n    \"institutionId\": {{institutionIdFromUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n  \"shortDescription\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n  \"uri\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n      \"role\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectIdWithInstitution\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "9996"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n  \"shortDescription\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n  \"uri\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n      \"role\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_DataOfficer-Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuidWithInstitution\", jsonData.guid);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "9996"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectIdWithInstitution}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-CreateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"wizardPageId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": {{createdInstitutionId}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-SelfWithSameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});",
													"",
													"pm.test(\"Check if institution id is 1\", function () {",
													"    pm.expect(jsonData.institution.id).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_DataOfficer-alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n  \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-SelfWithWrongInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Instance guid should be: DD72C521-1D06-4E11-A0E0-AAE515E7F900\", function () {",
													"    pm.expect(jsonData.instance).to.equal(\"DD72C521-1D06-4E11-A0E0-AAE515E7F900\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_DataOfficer-alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n  \"institutionId\": {{createdInstitutionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-OtherWithSameInstitution-SameInstitutionId-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var institutionId = pm.environment.get(\"institutionIdFromUser\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Institution Id is \" + institutionId, function() {",
													"    pm.expect(jsonData.institution.id).to.equal(parseInt(institutionId));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"User-UpdateUser-OtherWithSameInstitution\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"institutionId\": {{institutionIdFromUser}},\r\n  \"identityId\": \"9996\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": \"99966\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var aliceIdentityId = parseInt(pm.environment.get(\"dataOfficerUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "Category-CreateCategory-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetAllCategories-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findCategory(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category met: \" + categoryName + \" is in list\", function () {",
													"    foundAt = findCategory(jsonData, categoryName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryNameInitial\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Tag name is set correctly and matches: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-UpdateCategory-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryNameUpdated}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-DeleteCategory-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var registeredUserId = pm.environment.get(\"dataOfficerUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n  \"uri\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n      \"role\": \"postmantest_Project-CreateProject-DataOfficer\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n  \"shortDescription\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n  \"uri\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n      \"role\": \"postmantest_Project-UpdateProject-Self-DataOfficer\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-OtherInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectToBeDeletedByUnauthorizedRoles}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectToBeDeletedByUnauthorizedRoles}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"instituteprivate is set correctly\", function(){\r",
													"    pm.expect(jsonData.institutePrivate).to.eql(true);\r",
													"})\r",
													"\r",
													"pm.test(\"institute is added\", function(){\r",
													"    pm.expect(jsonData.linkedInstitutions).not.empty.null;\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"instituteprivate is set correctly\", function(){\r",
													"    pm.expect(jsonData.institutePrivate).to.eql(false);\r",
													"})\r",
													"\r",
													"pm.test(\"institute is added\", function(){\r",
													"    pm.expect(jsonData.linkedInstitutions).not.empty.null;\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "false\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectToMakePrivateId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectToMakePrivateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LinkInstitutionToProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.forbidden;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnlinkInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.forbidden\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CategorizeProject",
							"item": [
								{
									"name": "Project-CategorizeProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CategorizeProject-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdWithInstitution}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdWithInstitution}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CategorizeProject-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectToBeDeletedByUnauthorizedRoles}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectToBeDeletedByUnauthorizedRoles}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdWithInstitution}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdWithInstitution}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectToBeDeletedByUnauthorizedRoles}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectToBeDeletedByUnauthorizedRoles}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuidWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuidWithInstitution}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wizard",
							"item": []
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-DataOffficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"dataOfficerFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{dataOfficerFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{dataOfficerFileId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WizardPage",
							"item": [
								{
									"name": "WizardPage-CreateWizardPage-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetAllWizardPages-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var pageId = parseInt(pm.environment.get(\"wizardPageId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Wizard page with id: \" + pageId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, pageId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var wizardPageId = pm.environment.get(\"wizardPageId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created wizard page with id \" + wizardPageId, function () {",
													"    pm.expect(jsonData.id).to.eql(wizardPageId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedWizardPageName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataSource",
							"item": [
								{
									"name": "DataSource-GetAllDataSources-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var dataSourceId = pm.environment.get(\"dataSourceId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created data source with id \" + dataSourceId, function () {",
													"    pm.expect(jsonData.guid).to.eql(dataSourceId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Title\": \"{{updatedDataSourceName}}\",\r\n  \"description\": \"postmantest_DataSource-UpdateDataSource-Administrator\",\r\n  \"IsVisible\": true,\r\n  \"IconId\": 0,\r\n  \"WizardPageResources\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup Data Officer",
							"item": [
								{
									"name": "Project-DeleteProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectIdWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectIdWithInstitution}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-SelfWithNoInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});",
													"",
													"pm.test(\"Check if institution is null\", function () {",
													"    pm.expect(jsonData.institution).to.equal(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_DataOfficer-alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-DeleteInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-SameInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-DifferentInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-DeleteWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"99966\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_PR-User-CreateUser@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_PR-Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_PR-Project-CreateProject\",\r\n  \"uri\": \"postmantest_PR-Project-CreateProject\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_PR-Project-CreateProject\",\r\n      \"role\": \"postmantest_PR-Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_PR-Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-CreateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"wizardPageId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var prUserIdentityId = parseInt(pm.environment.get(\"prUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"PrUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + prUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(prUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedPrUserEmail = pm.environment.get(\"updatedPrUserEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedPrUserEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedPrUserEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_Pr_jerry\",\r\n  \"email\": \"{{updatedPrUserEmail}}\",\r\n  \"identityId\": \"{{prUserIdentityId}}\",\r\n  \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{PrUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{PrUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "Category-CreateCategory-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetAllCategories-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findCategory(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category met: \" + categoryName + \" is in list\", function () {",
													"    foundAt = findCategory(jsonData, categoryName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryNameInitial\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matches: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-UpdateCategory-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryNameUpdated}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-DeleteCategory-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var PrUserId = pm.environment.get(\"PrUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Id is set correctly and matches: \" + PrUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(PrUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-PR\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-PR\",\r\n  \"uri\": \"postmantest_Project-CreateProject-PR\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-PR\",\r\n      \"role\": \"postmantest_Project-CreateProject-PR\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-PR\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-PR\",\r\n  \"uri\": \"postmantest_Project-CreateProject-PR\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-PR\",\r\n      \"role\": \"postmantest_Project-CreateProject-PR\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"instituteprivate is set correctly\", function(){\r",
													"    pm.expect(jsonData.institutePrivate).to.eql(true);\r",
													"})\r",
													"\r",
													"pm.test(\"institute is added\", function(){\r",
													"    pm.expect(jsonData.linkedInstitutions).not.empty.null;\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LinkInstitutionToProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.forbidden;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnlinkInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.forbidden\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created project id matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CategorizeProject",
							"item": [
								{
									"name": "Project-CategorizeProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CategorizeProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"otherEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"otherEmbeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var otherEmbeddedProjectId = parseInt(pm.environment.get(\"otherEmbeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + otherEmbeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(otherEmbeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Self-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Self-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"adminHighlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Other-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + adminHighlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(adminHighlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminProjectId = parseInt(pm.environment.get(\"adminProjectId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + adminProjectId, function () {",
													"    foundAt = findProjectId(jsonData, adminProjectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + adminHighlightId, function () {",
													"    foundAt = findHighlightId(jsonData, adminHighlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Other-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wizard",
							"item": []
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"prFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{prFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{prFileId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WizardPage",
							"item": [
								{
									"name": "WizardPage-CreateWizardPage-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetAllWizardPages-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var pageId = parseInt(pm.environment.get(\"wizardPageId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Wizard page with id: \" + pageId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, pageId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var wizardPageId = pm.environment.get(\"wizardPageId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created wizard page with id \" + wizardPageId, function () {",
													"    pm.expect(jsonData.id).to.eql(wizardPageId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedWizardPageName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataSource",
							"item": [
								{
									"name": "DataSource-GetAllDataSources-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var dataSourceId = pm.environment.get(\"dataSourceId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created data source with id \" + dataSourceId, function () {",
													"    pm.expect(jsonData.guid).to.eql(dataSourceId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Title\": \"{{updatedDataSourceName}}\",\r\n  \"description\": \"postmantest_DataSource-UpdateDataSource-Administrator\",\r\n  \"IsVisible\": true,\r\n  \"IconId\": 0,\r\n  \"WizardPageResources\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup PR",
							"item": [
								{
									"name": "Project-DeleteProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-DeleteWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ConvertRegisteredToAlumni",
					"item": [
						{
							"name": "Project-CreateProject-Preperation-Alumni",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var alumniUserId = pm.environment.get(\"alumniUserId\");",
											"var projectName = pm.environment.get(\"projectName\");",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"projectId\", jsonData.id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "IdentityId",
										"type": "text",
										"value": "{{registeredUserIdentityId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/Project",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"Project"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeExpectedGraduationDate-Registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tomorrowDate = pm.environment.get(\"tomorrowDate\");",
											"",
											"var jsonData = pm.response.json();",
											"",
											"eval(pm.environment.get(\"commonTests\"))();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var tomorrow = (Date.now() + 86400000) // today + 1 day\r",
											"pm.environment.set(\"tomorrowDate\", new Date(tomorrow).toISOString())\r",
											"console.log(pm.environment.get(\"tomorrowDate\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "IdentityId",
										"type": "text",
										"value": "{{registeredUserIdentityId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"User-CreateUser-Alumni\",\r\n  \"identityId\": \"{{registeredUserIdentityId}}\",\r\n  \"expectedGraduationDateTime\": \"{{tomorrowDate}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"User",
										"{{registeredUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateGraduationUserTasks",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "IdentityId",
										"value": "{{administratorUserIdentityId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUrl}}/api/UserTask/CreateUserTasks/6",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"UserTask",
										"CreateUserTasks",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert-RegisteredAccountToAlumniRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"alumniIdentityId\", jsonData.identityId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "IdentityId",
										"value": "{{registeredUserIdentityId}}",
										"type": "text"
									},
									{
										"key": "email",
										"value": "alumniTest@postman.com",
										"type": "text"
									},
									{
										"key": "password",
										"value": "test",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUrl}}/api/UserTask/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"UserTask",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Alumni",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_Registered_User-CreateUser@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"uri\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Registered-Project-CreateProject\",\r\n      \"role\": \"postmantest_Registered-Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Registered_Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-CreateWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"wizardPageId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var alumniIdentityId = parseInt(pm.environment.get(\"alumniIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"alumniUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Identity ID is correct and matching: \" + alumniIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(alumniIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAlumniMail = pm.environment.get(\"updatedAlumniMail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAlumniMail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAlumniMail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"alicez\",\r\n  \"email\": \"{{updatedAlumniMail}}\",\r\n  \"identityId\": \"{{alumniIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{alumniUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{alumniUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "Category-CreateCategory-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetAllCategories-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findCategory(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category met: \" + categoryName + \" is in list\", function () {",
													"    foundAt = findCategory(jsonData, categoryName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matching: \" + categoryName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-GetCategory-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var categoryName = pm.environment.get(\"categoryNameInitial\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Category name is set correctly and matches: \" + categoryName, function () {",
													"    pm.expect(jsonData.name).to.eql(categoryName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-UpdateCategory-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{categoryNameUpdated}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Category-DeleteCategory-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Category",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var alumniUserId = pm.environment.get(\"alumniUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-MakeInstitutionPrivate-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.forbidden;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "true\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/instituteprivate/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"instituteprivate",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LinkInstitutionToProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.forbidden;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnlinkInstitution-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.forbidden\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/linkedinstitution/{{projectId}}/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"linkedinstitution",
												"{{projectId}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CategorizeProject",
							"item": [
								{
									"name": "Project-CategorizeProject-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CategorizeProject-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectId}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectId}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UncategorizeProject-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/category/{{projectIdToCategorize}}/{{categoryIdToBeCategorized}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"category",
												"{{projectIdToCategorize}}",
												"{{categoryIdToBeCategorized}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Get-Files-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post-File-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"registeredFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{alumniIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{registeredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{registeredFileId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataSource",
							"item": [
								{
									"name": "DataSource-GetAllDataSources-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var dataSourceId = pm.environment.get(\"dataSourceId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created data source with id \" + dataSourceId, function () {",
													"    pm.expect(jsonData.guid).to.eql(dataSourceId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Title\": \"{{updatedDataSourceName}}\",\r\n  \"description\": \"postmantest_DataSource-UpdateDataSource-Administrator\",\r\n  \"IsVisible\": true,\r\n  \"IconId\": 0,\r\n  \"WizardPageResources\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/DataSource/{{dataSourceId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"DataSource",
												"{{dataSourceId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WizardPage",
							"item": [
								{
									"name": "WizardPage-CreateWizardPage-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_WizardPage-CreateWizardPage-Administrator\",\r\n  \"description\": \"postman_WizardPage-CreateWizardPage-Administrator-Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetAllWizardPages-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var pageId = parseInt(pm.environment.get(\"wizardPageId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Wizard page with id: \" + pageId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, pageId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-GetWizardPageById-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var wizardPageId = pm.environment.get(\"wizardPageId\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check previously created wizard page with id \" + wizardPageId, function () {",
													"    pm.expect(jsonData.id).to.eql(wizardPageId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-UpdateWizardPage-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedWizardPageName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Alumni",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{alumniIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WizardPage-DeleteWizardPage-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/WizardPage/{{wizardPageId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"WizardPage",
												"{{wizardPageId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Global",
			"item": [
				{
					"name": "Global-AverageTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var avgResponseTime = postman.getGlobalVariable(\"response_average\");\r",
									"var responseTimeThreshold = pm.environment.get(\"responseTimeThreshold\");\r",
									"\r",
									"pm.test(\"Average response time: \" + avgResponseTime + \" is lower than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(avgResponseTime <= responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "DeleteUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Delete-RegisteredUser",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{alumniUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{alumniUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Delete-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{prUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{prUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Delete-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete-ProjectForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectIdToFollow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-ProjectForCategorizing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectIdToCategorize}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectIdToCategorize}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-ProjectToBeDeletedByUnauthorizedRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectToBeDeletedByUnauthorizedRoles}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectToBeDeletedByUnauthorizedRoles}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-UserForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userIdToFollow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-CategoryForCategorizing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Category/{{categoryIdToBeCategorized}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Category",
								"{{categoryIdToBeCategorized}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role-DeleteRole-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Role/{{roleId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Role",
								"{{roleId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1",
					"",
					"let tokenUrl = pm.variables.get(\"tokenUrl\");",
					"let clientId = pm.variables.get(\"clientId\");",
					"let clientSecret = pm.variables.get(\"clientSecret\");",
					"let scope = pm.variables.get(\"scope\");",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"            { key: \"username\", value: clientId },",
					"            { key: \"password\", value: clientSecret }",
					"        ]",
					"    },",
					"    body: {",
					"        mode: 'formdata',",
					"        formdata: [",
					"            { key: 'grant_type', value: 'client_credentials' },",
					"            { key: 'scope', value: scope }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}